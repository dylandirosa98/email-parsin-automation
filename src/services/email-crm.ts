import { ParsedLead } from '../types';
import logger from '../utils/logger';
import nodemailer from 'nodemailer';

class EmailCRMService {
  private transporter: nodemailer.Transporter;
  private crmEmailAddress: string;

  constructor() {
    // Many CRMs can parse structured emails to create leads
    this.crmEmailAddress = process.env.TWENTY_EMAIL_INTEGRATION || 'leads@crm.thespartanexteriors.com';
    
    this.transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.GMAIL_USER || process.env.TARGET_EMAIL,
        pass: process.env.GMAIL_APP_PASSWORD // You'll need an app password
      }
    });
  }

  public async createLeadViaEmail(parsedLead: ParsedLead): Promise<string | null> {
    try {
      logger.info(`Sending lead via email to CRM: ${parsedLead.name}`);

      const emailSubject = `New Lead: ${parsedLead.name} - ${parsedLead.utmSource || 'Direct'}`;
      
      const emailBody = `
New Lead Information:

CONTACT DETAILS:
Name: ${parsedLead.name}
Email: ${parsedLead.email || 'Not provided'}
Phone: ${parsedLead.phone || 'Not provided'}
Message: ${parsedLead.message || 'No message'}

LOCATION:
Address: ${parsedLead.address || 'Not provided'}
City: ${parsedLead.city || 'Not provided'}
ZIP Code: ${parsedLead.zipCode || 'Not provided'}

TRACKING INFORMATION:
Source: ${parsedLead.utmSource || 'Direct'}
Medium: ${parsedLead.utmMedium || 'Not specified'}
Campaign: ${parsedLead.utmCampaign || 'Not specified'}
Form Type: ${parsedLead.formType || 'Contact Form'}
Submission Time: ${parsedLead.formSubmissionTime || new Date().toISOString()}

CLICK IDs:
Google Click ID: ${parsedLead.googleClickId || 'None'}
Microsoft Click ID: ${parsedLead.microsoftClickId || 'None'}
Facebook Click ID: ${parsedLead.facebookClickId || 'None'}

---
Generated by Email Parser Automation
      `.trim();

      const mailOptions = {
        from: process.env.TARGET_EMAIL,
        to: this.crmEmailAddress,
        subject: emailSubject,
        text: emailBody,
        headers: {
          'X-Lead-Source': parsedLead.utmSource || 'direct',
          'X-Lead-Email': parsedLead.email || '',
          'X-Lead-Phone': parsedLead.phone || '',
          'X-Original-Form-Time': parsedLead.formSubmissionTime || new Date().toISOString()
        }
      };

      const result = await this.transporter.sendMail(mailOptions);
      logger.info(`Email sent to CRM successfully: ${result.messageId}`);
      
      return result.messageId;

    } catch (error) {
      logger.error('Failed to send lead via email:', error);
      throw error;
    }
  }
}

export const emailCRMService = new EmailCRMService();
export default emailCRMService;
